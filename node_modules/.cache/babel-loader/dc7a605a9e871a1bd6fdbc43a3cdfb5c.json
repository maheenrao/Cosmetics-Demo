{"ast":null,"code":"var _jsxFileName = \"D:\\\\practices\\\\Cosmetics\\\\src\\\\Store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport CartContext from \"./CartContext\";\nimport { useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItems;\n\n    if (existingCartItem) {\n      const updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      existingCartItem[existingCartItemIndex] = updatedItem;\n    } else {\n      updatedItems = state.item.concat(action.item);\n    }\n\n    return {\n      item: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === 'REMOVE') {\n    const existingCartItemsIndex = state.items.findIndex(item => item.id === action.id);\n    const existingItem = state.item[existingCartItemsIndex];\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\n    let updatedItems;\n\n    if (existingItem.amount === 1) {\n      updatedItems = state.items.filter(item => item.id !== action.id);\n    } else {\n      const updatedItem = { ...existingItem,\n        amount: existingItem.aomunt - 1\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item\n    });\n  };\n\n  const removeItemCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemCartHandler,\n    removeItem: removeItemCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["D:/practices/Cosmetics/src/Store/CartProvider.js"],"names":["React","CartContext","useReducer","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","concat","existingCartItemsIndex","existingItem","filter","aomunt","CartProvider","props","cartState","dispatchCartAction","addItemCartHandler","removeItemCartHandler","cartContext","addItem","removeItem","children"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport CartContext from \"./CartContext\";\r\nimport { useReducer } from \"react\";\r\n\r\nconst defaultCartState = {\r\n  items: [],\r\n  totalAmount: 0,\r\n};\r\nconst cartReducer = (state, action) => {\r\n  if (action.type === \"ADD\") {\r\n    const updatedTotalAmount =\r\n      state.totalAmount + action.item.price * action.item.amount;\r\n      const existingCartItemIndex = state.items.findIndex(\r\n        (item) => item.id === action.item.id\r\n      );\r\n    const existingCartItem = state.items[existingCartItemIndex]\r\n    \r\n      let updatedItems\r\n      if(existingCartItem) {\r\n        const updatedItem = {\r\n          ...existingCartItem,\r\n          amount: existingCartItem.amount + action.item.amount\r\n        }\r\n        updatedItems= [...state.items]\r\n        existingCartItem[existingCartItemIndex] = updatedItem\r\n      }else{\r\n       \r\n        updatedItems =state.item.concat(action.item)\r\n      }\r\n    return {\r\n      item: updatedItems,\r\n      totalAmount: updatedTotalAmount,\r\n    };\r\n  }\r\n  if(action.type === 'REMOVE') {\r\n   \r\n    const existingCartItemsIndex = state.items.findIndex(\r\n      (item) => item.id === action.id\r\n    );\r\n    const existingItem = state.item[existingCartItemsIndex]\r\n    const updatedTotalAmount = state.totalAmount - existingItem.price\r\n      let updatedItems\r\n      if(existingItem.amount === 1) {\r\n        updatedItems = state.items.filter( item => item.id !== action.id)\r\n      }else{\r\n          const updatedItem = {...existingItem , amount: existingItem.aomunt - 1}\r\n        updatedItems=[...state.items]\r\n        updatedItems[existingCartItemIndex] = updatedItem\r\n        }\r\n        return {\r\n          items: updatedItems,\r\n          totalAmount: updatedTotalAmount\r\n        }\r\n  \r\n  }\r\n  return defaultCartState;\r\n};\r\nconst CartProvider = (props) => {\r\n  const [cartState, dispatchCartAction] = useReducer(\r\n    cartReducer,\r\n    defaultCartState\r\n  );\r\n  const addItemCartHandler = (item) => {\r\n    dispatchCartAction({ type: \"ADD\", item: item });\r\n  };\r\n  const removeItemCartHandler = (id) => {\r\n    dispatchCartAction({ type: \"REMOVE\", id: id });\r\n  };\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalAmount: cartState.totalAmount,\r\n    addItem: addItemCartHandler,\r\n    removeItem: removeItemCartHandler,\r\n  };\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartProvider;\r\n"]},"metadata":{},"sourceType":"module"}