{"ast":null,"code":"var _jsxFileName = \"D:\\\\practices\\\\Cosmetics\\\\src\\\\Store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport CartContext from \"./CartContext\";\nimport { useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    const existingCartItem = state.items[existingCartItemsIndex];\n    let updatedItems;\n\n    if (existingCartItem) {\n      const updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      existingCartItem[existingCartItemsIndex] = updatedItem;\n    } else {\n      updatedItems = state.item.concat(action.item);\n    }\n\n    return {\n      item: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === 'REMOVE') {\n    const existingCartItemsIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingItem = state.item[existingCartItemsIndex];\n    const updatedAmount = state.totalAmount - existingItem.price;\n    let updatedItems;\n\n    if (existingItem.amount === 1) {\n      updatedItems = state.items.filter();\n    } else {}\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item\n    });\n  };\n\n  const removeItemCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemCartHandler,\n    removeItem: removeItemCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["D:/practices/Cosmetics/src/Store/CartProvider.js"],"names":["React","CartContext","useReducer","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItem","existingCartItemsIndex","updatedItems","updatedItem","concat","findIndex","id","existingItem","updatedAmount","filter","CartProvider","props","cartState","dispatchCartAction","addItemCartHandler","removeItemCartHandler","cartContext","addItem","removeItem","children"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport CartContext from \"./CartContext\";\r\nimport { useReducer } from \"react\";\r\n\r\nconst defaultCartState = {\r\n  items: [],\r\n  totalAmount: 0,\r\n};\r\nconst cartReducer = (state, action) => {\r\n  if (action.type === \"ADD\") {\r\n    const updatedTotalAmount =\r\n      state.totalAmount + action.item.price * action.item.amount;\r\n   \r\n    const existingCartItem = state.items[existingCartItemsIndex]\r\n    \r\n      let updatedItems\r\n      if(existingCartItem) {\r\n        const updatedItem = {\r\n          ...existingCartItem,\r\n          amount: existingCartItem.amount + action.item.amount\r\n        }\r\n        updatedItems= [...state.items]\r\n        existingCartItem[existingCartItemsIndex] = updatedItem\r\n      }else{\r\n       \r\n        updatedItems =state.item.concat(action.item)\r\n      }\r\n    return {\r\n      item: updatedItems,\r\n      totalAmount: updatedTotalAmount,\r\n    };\r\n  }\r\n  if(action.type === 'REMOVE') {\r\n   \r\n    const existingCartItemsIndex = state.items.findIndex(\r\n      (item) => item.id === action.item.id\r\n    );\r\n    const existingItem = state.item[existingCartItemsIndex]\r\n    const updatedAmount = state.totalAmount - existingItem.price\r\n      let updatedItems\r\n      if(existingItem.amount === 1) {\r\n        updatedItems = state.items.filter()\r\n      }else{\r\n\r\n      }\r\n  \r\n  }\r\n  return defaultCartState;\r\n};\r\nconst CartProvider = (props) => {\r\n  const [cartState, dispatchCartAction] = useReducer(\r\n    cartReducer,\r\n    defaultCartState\r\n  );\r\n  const addItemCartHandler = (item) => {\r\n    dispatchCartAction({ type: \"ADD\", item: item });\r\n  };\r\n  const removeItemCartHandler = (id) => {\r\n    dispatchCartAction({ type: \"REMOVE\", id: id });\r\n  };\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalAmount: cartState.totalAmount,\r\n    addItem: addItemCartHandler,\r\n    removeItem: removeItemCartHandler,\r\n  };\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartProvider;\r\n"]},"metadata":{},"sourceType":"module"}